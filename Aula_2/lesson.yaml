- Class: meta
  Course: VisManDados
  Lesson: Aula 2
  Author: Marina C. Scalon
  Type: Standard
  Organization: UFPR - PPG Ecologia e Conservacao
  Version: 2.4.5
  
- Class: text
  Output: Agora ja estamos mais acostumados om o swirl! Vamos nessa aula aprender sobre manipulacao de dados utilizando o pacote tidyverse.
  
- Class: cmd_question
  Output: Tambem vamos usar o mesmo conjunto de dados da aula anterior, que ja deve estar carregado pra voce. Confira novamente as variaveis desse conjunto de dados com o comando ls(dados) 
  CorrectAnswer: ls(dados)
  AnswerTests: omnitest(correctExpr='ls(dados)')
  Hint: Use ls(dados) para ver a lista de variaveis do dataset.

- Class: cmd_question
  Output: Nessa aula sera nescessario instalarmos e carregarmos o pacote tidyverse. Carregue o pacote utilizando o comando library(tidyverse)
  CorrectAnswer: library(tidyverse)
  AnswerTests: omnitest(correctExpr='library(tidyverse)')
  Hint: library(tidyverse) vai carregar o pacote, permitindo o uso de suas funcoes. Caso ele nao esteja instalado na sua biblioteca, use install.packages("tidyverse") para instala-lo.

- Class: text
  Output: Vamos comecar demostrando as funcoes do pacote dplyr, que ajudam a resolver a maior parte dos problemas comuns na manipulacao de dados. 

- Class: cmd_question
  Output: Uma funcao do dplyr bem util e a funcao select(). Com ela voce pode escolher variaveis de interesse para determinada analise ou grafico. Vamos escolher, utilizando a funcao *select*, apenas as variaveis categoricas do nosso conjunto de dados em um novo dataset chamado *categoricas*.
  CorrectAnswer: categoricas <- select(dados, Tratamento, Espécie, Grupo)
  AnswerTests: omnitest(correctExpr='categoricas <- select(dados, Tratamento, Espécie, Grupo)')
  Hint: categoricas <- select(dados, Tratamento, Espécie, Grupo) vai criar um conjunto de dados apenas com as variaveis categoricas.

- Class: cmd_question
  Output: A funcao select() tambem nos permite eliminar determinadas variaveis. Para isso, basta listar as variaveis indesejadas com o sinal - na frente. Por exemplo, para eliminar variaveis que nao representam muito, como Amostra e Individuo, vamos criar um novo dataset denominado *clean* sem essas variaveis. 
  CorrectAnswer: clean <- select(dados, -Amostra, -Indivíduo)
  AnswerTests: omnitest(correctExpr='clean <- select(dados, -Amostra, -Indivíduo)')
  Hint: Digite clean <- select(dados, -Amostra, -Indivíduo) para criar um dataset sem as variáveis Amostra e Individuo.
  
- Class: cmd_question
  Output: Voce tambem pode usar uma condicao com a funcao select_if() para determinar uma selecao especifica de algumas variaveis. Por exemplo, vamos criar um novo dataset denominado *numericas* que selecione apenas as variaveis numericas usando o condicional select_if para apenas as variaveis is.numeric. 
  CorrectAnswer: numericas <- select_if(dados, is.numeric)
  AnswerTests: omnitest(correctExpr='numericas <- select_if(dados, is.numeric)')
  Hint: Digite numericas <- select_if(dados, is.numeric) para criar um dataset apenas com as variaveis numericas.

- Class: text
  Output: A funcao select() é usada apenas para selecao de variaveis (ou seja, colunas). Para selcionar linhas, devemos usar a funcao slice() ou a funcao filter() do pacote dplyr. 

- Class: cmd_question
  Output: Para selecionarmos ou excluirmos determinadas linhas usamos slice(), onde o numero da linhas deve ser informado. Vamos fazer uma amostra dos dados chamada x contendo apenas as linhas de 10 a 20.
  CorrectAnswer: x <- slice(dados, 10:20)
  AnswerTests: omnitest(correctExpr='x <- slice(dados, 10:20)')
  Hint: x <- slice(dados, 10:20) vai criar um dataset contendo apenas as linhas de 10-20 do dataset original.
  
- Class: cmd_question
  Output: Agora para excluirmos determinadas linhas usamos slice() vamos fazer uma amostra do dataset chamada y excluindo as linhas de 10 a 20.
  CorrectAnswer: x <- slice(dados, -10:-20)
  AnswerTests: omnitest(correctExpr='x <- slice(dados, -10:-20)')
  Hint: x <- slice(dados, -10:-20) vai criar um dataset que exclui linhas de 10-20 do dataset original.

- Class: cmd_question
  Output: Para filtrarmos os dados sem selecionar o numero das linhas, mas sim listando as linhas com determinada condicao, usamos a funcao filter(). Para fazer um dataset chamado *campo* contendo apenas as observacoes no tratamento 'Campo sujo'. podemos usar a função filter(dados, Tratamento == "Campo sujo"). 
  CorrectAnswer: campo <- filter(dados, Tratamento == "Campo sujo")
  AnswerTests: omnitest(correctExpr='campo <- filter(dados, Tratamento == "Campo sujo")')
  Hint: campo <- filter(dados, Tratamento == "Campo sujo") vai criar um dataset com apenas as observacoes no campo sujo.
  
- Class: text
  Output: A funcao filter() e equivalente a funcao subset(). Funciona exatamente da mesma forma e aceita os mesmos operadores logicos.

- Class: text
  Output: Vamos brincar um pouco com adicionar condicoes de filtragem dos dados! Utilizaremos os simbolos & para adicionar as diferentes condicoes, o simbolo != para excluir determinados valores, o == para selecionar apenas esses valores e as operacoes matematicas > ou < para selecionar valores maiores ou menor que o desejado.

- Class: cmd_question
  Output: Vamos fazer um dataset chamado *filtro* contendo apenas as observacoes no tratamento 'Campo sujo', excluindo as plantas do grupo das sempre-verdes 'S'e para as acumuladoras de Al (em que Al.ppm > 1000)
  CorrectAnswer: filtro <- filter(dados, Tratamento =="Campo sujo" & 
                                     Grupo != "S" & 
                                     Al.ppm >1000)
  AnswerTests: omnitest(correctExpr='filtro <- filter(dados, Tratamento =="Campo sujo" & 
                                     Grupo != "S" & 
                                     Al.ppm >1000)')
  Hint: filtro <- filter(dados, Tratamento =="Campo sujo" & 
                                     Grupo != "S" & 
                                     Al.ppm >1000) vai criar um dataset que queremos.

- Class: cmd_question
  Output: Tambem podemos usar a funcao rename() para mudar os nomes das variaveis. Vamos mudar o nome das variaveis de acordo com o que voce quiser. Lembrando que a sintaxe da funcao rename e rename(dados, `nome que voce quer`= `nome antigo`).
  CorrectAnswer: rename(dados, N = N., P = P..., Mg = Mg...,
                K = K..., Ca = Ca..., Al = Al.ppm, 
                area = `Área.média..cm².`, peso = `Peso.médio..g.`)
  AnswerTests: expr_uses_func('rename')
  Hint: Use a funcao rename() para modificar os nomes das variaveis
  
- Class: text
  Output: Vamos agora testar as multiplas utilidades da funcao *mutate()*. Mutate pode ser usada para transformar classes de objetos, mudar nomes das variaveis ou fatores e criar novas variaveis.
  
- Class: cmd_question
  Output: Primeiramente vamos modificar as variaveis que sao characteres para torarem-se fatores. Para isso, utilize a funcao mutate_if, criando um novo dataset chamado fator.
  CorrectAnswer: factor <- mutate_if(dados, is.character, as.factor) 
  AnswerTests: omnitest(correctExpr='fator <- mutate_if(dados, is.character, as.factor)')
  Hint: Digite factor <- mutate_if(new, is.character, as.factor) para transformar as classes dos objetos. 
  
